@model Trader.Models.DashboardViewModel
@using ChartJSCore.Models;

<div class="container">
    <div>
        <div class="row">
            <form asp-action="Dashboard">
                <div class="col-md-3">
                    <label asp-for="filter.instrumentId" class="control-label"></label>:
                    @Html.DropDownListFor(model => model.filter.instrumentId , Model.filter.InstrumentList, "-Instrument-")
                </div>
                <div class="col-md-2">
                    <label asp-for="filter.monthNo" class="control-label"></label>:
                    @Html.DropDownListFor(model => model.filter.monthNo , Model.filter.Month, "-Month-")
                </div>
                <div class="col-md-3">
                    <label asp-for="filter.exchangeId" class="control-label"></label>:
                    @Html.DropDownListFor(model => model.filter.exchangeId , Model.filter.ExchangeList, "-Exchange-")
                </div>
            
                <div class="col-md-2 form-actions no-color">
                    <input type="submit" value="Filter" class="btn btn-default" />
                </div>
                <div class="col-md-2">
                    <a href="#bigChart" data-toggle="collapse">Hide</a>
                </div>
            </form>

        </div>
    </div>
    <div class="jumbotron">
        <div class="row">
            @{
                if (Model.TotalInvested >= 0)
                {
                    <div class="col-md-4 stat_container">
                        <label class="stat_label visible-lg-inline-block">@Html.DisplayNameFor(model => model.TotalInvested):  </label>
                        <p class="text-success visible-lg-inline-block stat_value">@Html.DisplayFor(model => model.TotalInvested) </p><span class="glyphicon glyphicon-circle-arrow-up text-success" />
                    </div>
                }
                else
                {
                    <div class="col-md-4 stat_container">
                        <label class="stat_label visible-lg-inline-block">@Html.DisplayNameFor(model => model.TotalInvested):  </label>
                        <p class="text-danger visible-lg-inline-block stat_value">@Html.DisplayFor(model => model.TotalInvested) </p><span class="glyphicon glyphicon-circle-arrow-down text-danger" />
                    </div>
                }
                if (Model.Return >= 0)
                {
                    <div class="col-md-4 stat_container">
                        <label class="stat_label visible-lg-inline-block">@Html.DisplayNameFor(model => model.Return):  </label>
                        <p class="text-success visible-lg-inline-block stat_value">@Html.DisplayFor(model => model.Return) </p><span class="glyphicon glyphicon-circle-arrow-up text-success" />
                    </div>
                }
                else
                {
                    <div class="col-md-4 stat_container">
                        <label class="stat_label visible-lg-inline-block">@Html.DisplayNameFor(model => model.Return):  </label>
                        <p class="text-danger visible-lg-inline-block stat_value">@Html.DisplayFor(model => model.Return) </p><span class="glyphicon glyphicon-circle-arrow-down text-danger" />
                    </div>
                }
                if (Model.TotalHoldings >= 0)
                {
                    <div class="col-md-4 stat_container">
                        <label class="stat_label visible-lg-inline-block">@Html.DisplayNameFor(model => model.TotalHoldings):  </label>
                        <p class="text-success visible-lg-inline-block stat_value">@Html.DisplayFor(model => model.TotalHoldings) </p><span class="glyphicon glyphicon-circle-arrow-up text-success" />
                    </div>
                }
                else
                {
                    <div class="col-md-4 stat_container">
                        <label class="stat_label visible-lg-inline-block">@Html.DisplayNameFor(model => model.TotalHoldings):  </label>
                        <p class="text-danger visible-lg-inline-block stat_value">@Html.DisplayFor(model => model.TotalHoldings) </p><span class="glyphicon glyphicon-circle-arrow-down text-danger" />
                    </div>
                }


            }
        </div>
        <div id="bigChart" class="collapse in">
            
            <canvas id="lineChart4"></canvas>
        </div>
    </div>
</div>

<div class="col-md-4"><canvas width="200" height="200" id="lineChart"></canvas></div>
<div class="col-md-4"><canvas width="200" height="200" id="lineChart2"></canvas></div>

<div class="col-md-4">
    <h4 align="center">Current Holdings</h4>
    <table class="table table-hover table-bordered">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.ActiveTrades[0].Instrument)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ActiveTrades[0].Quantity)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ActiveTrades[0].Value)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ActiveTrades[0].Percentage)
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.ActiveTrades)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Instrument.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Quantity)
                    </td>
                    <td>
                        $@Html.DisplayFor(modelItem => item.Value)
                    </td>
                    <td>@Html.DisplayFor(modelItem => item.Percentage)
                    </td>
                </tr>
            }
        </tbody>
    </table>


</div>
<div class="col-md-3">
    <h4 align="center">Top level trading</h4>
    <dl class="dl-horizontal table-bordered">
        <dt>
            @Html.DisplayNameFor(model => model.TotalSellAmount)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.TotalSellAmount)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.TotalFeeAmount)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.TotalFeeAmount)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.TotalBuyAmount)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.TotalBuyAmount)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.TotalHoldings)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.TotalHoldings)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.TotalInvested)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.TotalInvested)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.TotalSpent)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.TotalSpent)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Return)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Return)
        </dd>
    </dl>
    
</div>

<div class="col-md-3"><canvas width="200" height="200" id="lineChart3"></canvas></div>
<div class="col-md-6"><canvas width="400" height="200" id="lineChart5"></canvas></div>
<div class="col-md-6"><canvas width="400" height="200" id="lineChart6"></canvas></div>


@{
    Chart chart = (Chart)Model.chartOne;
    Chart chart2 = (Chart)ViewData["chart2"];
    ChartJSCore.Models.Chart chart3 = (ChartJSCore.Models.Chart)ViewData["chart3"];
    ChartJSCore.Models.Chart chart4 = (ChartJSCore.Models.Chart)ViewData["chart4"];
    ChartJSCore.Models.Chart chart5 = (ChartJSCore.Models.Chart)ViewData["chart5"];
    ChartJSCore.Models.Chart chart6 = (ChartJSCore.Models.Chart)ViewData["chart6"];}

@section Scripts {
    <script src="~/js/Chart.min.js"></script>
    <script>
        @Html.Raw(chart.CreateChartCode("lineChart2"));
    @Html.Raw(chart2.CreateChartCode("lineChart2"));
    @Html.Raw(chart3.CreateChartCode("lineChart3"));
    @Html.Raw(chart4.CreateChartCode("lineChart4"));
    @Html.Raw(chart5.CreateChartCode("lineChart5"));
        @Html.Raw(chart6.CreateChartCode("lineChart6"));
    </script>
}